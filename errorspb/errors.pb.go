// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: errorspb/errors.proto

package errorspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MessageType encodes information regarding the interpretation of an
// error's message string.
type MessageType int32

const (
	// Keeping zero value as default for backwards compatibility.
	// PREFIX is a message that should be prepended to its cause.
	MessageType_PREFIX MessageType = 0
	// FULL_MESSAGE is a complete error message that can be displayed
	// without its cause.
	MessageType_FULL_MESSAGE MessageType = 1
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "PREFIX",
		1: "FULL_MESSAGE",
	}
	MessageType_value = map[string]int32{
		"PREFIX":       0,
		"FULL_MESSAGE": 1,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_errorspb_errors_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_errorspb_errors_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_errorspb_errors_proto_rawDescGZIP(), []int{0}
}

// EncodedError is the wire-encodable representation
// of an error (or error cause chain).
type EncodedError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Error:
	//
	//	*EncodedError_Leaf
	//	*EncodedError_Wrapper
	Error isEncodedError_Error `protobuf_oneof:"error"`
}

func (x *EncodedError) Reset() {
	*x = EncodedError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errorspb_errors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodedError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodedError) ProtoMessage() {}

func (x *EncodedError) ProtoReflect() protoreflect.Message {
	mi := &file_errorspb_errors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodedError.ProtoReflect.Descriptor instead.
func (*EncodedError) Descriptor() ([]byte, []int) {
	return file_errorspb_errors_proto_rawDescGZIP(), []int{0}
}

func (m *EncodedError) GetError() isEncodedError_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (x *EncodedError) GetLeaf() *EncodedErrorLeaf {
	if x, ok := x.GetError().(*EncodedError_Leaf); ok {
		return x.Leaf
	}
	return nil
}

func (x *EncodedError) GetWrapper() *EncodedWrapper {
	if x, ok := x.GetError().(*EncodedError_Wrapper); ok {
		return x.Wrapper
	}
	return nil
}

type isEncodedError_Error interface {
	isEncodedError_Error()
}

type EncodedError_Leaf struct {
	// This is used for leaf error objects.
	Leaf *EncodedErrorLeaf `protobuf:"bytes,1,opt,name=leaf,proto3,oneof"`
}

type EncodedError_Wrapper struct {
	// This is used for wrapper errors.
	Wrapper *EncodedWrapper `protobuf:"bytes,2,opt,name=wrapper,proto3,oneof"`
}

func (*EncodedError_Leaf) isEncodedError_Error() {}

func (*EncodedError_Wrapper) isEncodedError_Error() {}

// EncodedErrorLeaf is the wire-encodable representation
// of an error leaf or a multi-cause wrapper from go 1.20+
type EncodedErrorLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The main error message (mandatory), that can be printed to human
	// users and may contain PII. This contains the value of the leaf
	// error's Error(), or using a registered encoder.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// The error details.
	Details *EncodedErrorDetails `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	// multierror_causes is a list of errors that contain the causal tree
	// of this leaf. If this field is not empty, then this leaf encodes
	// an error from go 1.20 or later that encodes multiple causes in its
	// chain.
	MultierrorCauses []*EncodedError `protobuf:"bytes,3,rep,name=multierror_causes,json=multierrorCauses,proto3" json:"multierror_causes,omitempty"`
}

func (x *EncodedErrorLeaf) Reset() {
	*x = EncodedErrorLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errorspb_errors_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodedErrorLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodedErrorLeaf) ProtoMessage() {}

func (x *EncodedErrorLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_errorspb_errors_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodedErrorLeaf.ProtoReflect.Descriptor instead.
func (*EncodedErrorLeaf) Descriptor() ([]byte, []int) {
	return file_errorspb_errors_proto_rawDescGZIP(), []int{1}
}

func (x *EncodedErrorLeaf) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EncodedErrorLeaf) GetDetails() *EncodedErrorDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *EncodedErrorLeaf) GetMultierrorCauses() []*EncodedError {
	if x != nil {
		return x.MultierrorCauses
	}
	return nil
}

type EncodedErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The original fully qualified error type name (mandatory).
	// This is primarily used to print out error details
	// in error reports and Format().
	//
	// It is additionally used to populate the error mark
	// below when the family name is not known/set.
	// See the `markers` error package and the
	// RFC on error handling for details.
	OriginalTypeName string `protobuf:"bytes,1,opt,name=original_type_name,json=originalTypeName,proto3" json:"original_type_name,omitempty"`
	// The error mark. This is used to determine error equivalence and
	// identifying a decode function.
	// See the `markers` error package and the
	// RFC on error handling for details.
	ErrorTypeMark *ErrorTypeMark `protobuf:"bytes,2,opt,name=error_type_mark,json=errorTypeMark,proto3" json:"error_type_mark,omitempty"`
	// The reportable payload (optional), which is as descriptive as
	// possible but may not contain PII.
	//
	// This is extracted automatically using a registered encoder, if
	// any, or the SafeDetailer interface.
	ReportablePayload []string `protobuf:"bytes,3,rep,name=reportable_payload,json=reportablePayload,proto3" json:"reportable_payload,omitempty"`
	// An arbitrary payload that (presumably) encodes the
	// native error object. This is also optional.
	//
	// This is extracted automatically using a registered encoder, if
	// any.
	FullDetails *anypb.Any `protobuf:"bytes,4,opt,name=full_details,json=fullDetails,proto3" json:"full_details,omitempty"`
}

func (x *EncodedErrorDetails) Reset() {
	*x = EncodedErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errorspb_errors_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodedErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodedErrorDetails) ProtoMessage() {}

func (x *EncodedErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_errorspb_errors_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodedErrorDetails.ProtoReflect.Descriptor instead.
func (*EncodedErrorDetails) Descriptor() ([]byte, []int) {
	return file_errorspb_errors_proto_rawDescGZIP(), []int{2}
}

func (x *EncodedErrorDetails) GetOriginalTypeName() string {
	if x != nil {
		return x.OriginalTypeName
	}
	return ""
}

func (x *EncodedErrorDetails) GetErrorTypeMark() *ErrorTypeMark {
	if x != nil {
		return x.ErrorTypeMark
	}
	return nil
}

func (x *EncodedErrorDetails) GetReportablePayload() []string {
	if x != nil {
		return x.ReportablePayload
	}
	return nil
}

func (x *EncodedErrorDetails) GetFullDetails() *anypb.Any {
	if x != nil {
		return x.FullDetails
	}
	return nil
}

// EncodedWrapper is the wire-encodable representation
// of an error wrapper.
type EncodedWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cause error. Mandatory.
	Cause *EncodedError `protobuf:"bytes,1,opt,name=cause,proto3" json:"cause,omitempty"`
	// The wrapper message. This could either be a full error message
	// that can be printed independently, or a (potentially empty) prefix
	// which is printed before the cause's own message to construct the
	// full message. This may contain PII.
	//
	// This is extracted automatically:
	//
	// - for wrappers that have a registered encoder,
	// - otherwise, when the wrapper's Error() has its cause's Error() as suffix.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The error details.
	Details *EncodedErrorDetails `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	// message_type encodes the interpretation of `message`. Prior
	// versions will not set this field and it will be left as `PREFIX`.
	// This retains backwards compatibility since the new behavior is
	// only enabled when this enum is set to `FULL_MESSAGE`.
	MessageType MessageType `protobuf:"varint,4,opt,name=message_type,json=messageType,proto3,enum=cockroach.errorspb.MessageType" json:"message_type,omitempty"`
}

func (x *EncodedWrapper) Reset() {
	*x = EncodedWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errorspb_errors_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodedWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodedWrapper) ProtoMessage() {}

func (x *EncodedWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_errorspb_errors_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodedWrapper.ProtoReflect.Descriptor instead.
func (*EncodedWrapper) Descriptor() ([]byte, []int) {
	return file_errorspb_errors_proto_rawDescGZIP(), []int{3}
}

func (x *EncodedWrapper) GetCause() *EncodedError {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *EncodedWrapper) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EncodedWrapper) GetDetails() *EncodedErrorDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *EncodedWrapper) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_PREFIX
}

// ErrorTypeMark identifies an error type for the purpose of determining
// error equivalences and looking up decoder functions.
type ErrorTypeMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The family name identifies the error type.
	// This is equal to original_type_name above in the common case, but
	// can be overridden when e.g. the package that defines the type
	// changes path.
	// This is the field also used for looking up a decode function.
	FamilyName string `protobuf:"bytes,1,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// This marker string is used in combination with
	// the family name for the purpose of determining error equivalence.
	// This can be used to separate error instances that have the same type
	// into separate equivalence classes.
	// See the `markers` error package and the
	// RFC on error handling for details.
	Extension string `protobuf:"bytes,2,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ErrorTypeMark) Reset() {
	*x = ErrorTypeMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errorspb_errors_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorTypeMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorTypeMark) ProtoMessage() {}

func (x *ErrorTypeMark) ProtoReflect() protoreflect.Message {
	mi := &file_errorspb_errors_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorTypeMark.ProtoReflect.Descriptor instead.
func (*ErrorTypeMark) Descriptor() ([]byte, []int) {
	return file_errorspb_errors_proto_rawDescGZIP(), []int{4}
}

func (x *ErrorTypeMark) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *ErrorTypeMark) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

// StringsPayload is used to encode the payload of certain error
// types.
type StringsPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []string `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *StringsPayload) Reset() {
	*x = StringsPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errorspb_errors_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringsPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringsPayload) ProtoMessage() {}

func (x *StringsPayload) ProtoReflect() protoreflect.Message {
	mi := &file_errorspb_errors_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringsPayload.ProtoReflect.Descriptor instead.
func (*StringsPayload) Descriptor() ([]byte, []int) {
	return file_errorspb_errors_proto_rawDescGZIP(), []int{5}
}

func (x *StringsPayload) GetDetails() []string {
	if x != nil {
		return x.Details
	}
	return nil
}

// ErrnoPayload is used to encode the payload of syscall.Errno
// errors.
type ErrnoPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The original errno numeric code.
	OrigErrno int64 `protobuf:"varint,1,opt,name=orig_errno,json=origErrno,proto3" json:"orig_errno,omitempty"`
	// The platform where the syscall.Errno was encoded. This
	// is needed because the numeric values of syscall.Errno
	// have different meanings depending on the platform.
	// When decoding, if the arch field does not match we
	// use a substitute data type instead.
	Arch         string `protobuf:"bytes,2,opt,name=arch,proto3" json:"arch,omitempty"`
	IsPermission bool   `protobuf:"varint,3,opt,name=is_permission,json=isPermission,proto3" json:"is_permission,omitempty"`
	IsExist      bool   `protobuf:"varint,4,opt,name=is_exist,json=isExist,proto3" json:"is_exist,omitempty"`
	IsNotExist   bool   `protobuf:"varint,5,opt,name=is_not_exist,json=isNotExist,proto3" json:"is_not_exist,omitempty"`
	IsTimeout    bool   `protobuf:"varint,6,opt,name=is_timeout,json=isTimeout,proto3" json:"is_timeout,omitempty"`
	IsTemporary  bool   `protobuf:"varint,7,opt,name=is_temporary,json=isTemporary,proto3" json:"is_temporary,omitempty"`
}

func (x *ErrnoPayload) Reset() {
	*x = ErrnoPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errorspb_errors_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrnoPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrnoPayload) ProtoMessage() {}

func (x *ErrnoPayload) ProtoReflect() protoreflect.Message {
	mi := &file_errorspb_errors_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrnoPayload.ProtoReflect.Descriptor instead.
func (*ErrnoPayload) Descriptor() ([]byte, []int) {
	return file_errorspb_errors_proto_rawDescGZIP(), []int{6}
}

func (x *ErrnoPayload) GetOrigErrno() int64 {
	if x != nil {
		return x.OrigErrno
	}
	return 0
}

func (x *ErrnoPayload) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *ErrnoPayload) GetIsPermission() bool {
	if x != nil {
		return x.IsPermission
	}
	return false
}

func (x *ErrnoPayload) GetIsExist() bool {
	if x != nil {
		return x.IsExist
	}
	return false
}

func (x *ErrnoPayload) GetIsNotExist() bool {
	if x != nil {
		return x.IsNotExist
	}
	return false
}

func (x *ErrnoPayload) GetIsTimeout() bool {
	if x != nil {
		return x.IsTimeout
	}
	return false
}

func (x *ErrnoPayload) GetIsTemporary() bool {
	if x != nil {
		return x.IsTemporary
	}
	return false
}

var File_errorspb_errors_proto protoreflect.FileDescriptor

var file_errorspb_errors_proto_rawDesc = []byte{
	0x0a, 0x15, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x70, 0x62, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61,
	0x63, 0x68, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x70, 0x62, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63,
	0x68, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x65, 0x61, 0x66, 0x48, 0x00, 0x52, 0x04, 0x6c,
	0x65, 0x61, 0x66, 0x12, 0x3e, 0x0a, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68,
	0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xbe, 0x01, 0x0a,
	0x10, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x65, 0x61,
	0x66, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x70,
	0x62, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4d,
	0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x63, 0x6b,
	0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x10, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x61, 0x75, 0x73, 0x65, 0x73, 0x22, 0xf6, 0x01,
	0x0a, 0x13, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x70,
	0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x52,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x2d,
	0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x37, 0x0a,
	0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x05, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72,
	0x6f, 0x61, 0x63, 0x68, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x70,
	0x62, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x42,
	0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68,
	0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x4e, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xe5,
	0x01, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6e, 0x6f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6e, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x2a, 0x2b, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x01, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6a, 0x64, 0x6d, 0x65, 0x79, 0x65, 0x72, 0x33, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_errorspb_errors_proto_rawDescOnce sync.Once
	file_errorspb_errors_proto_rawDescData = file_errorspb_errors_proto_rawDesc
)

func file_errorspb_errors_proto_rawDescGZIP() []byte {
	file_errorspb_errors_proto_rawDescOnce.Do(func() {
		file_errorspb_errors_proto_rawDescData = protoimpl.X.CompressGZIP(file_errorspb_errors_proto_rawDescData)
	})
	return file_errorspb_errors_proto_rawDescData
}

var file_errorspb_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_errorspb_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_errorspb_errors_proto_goTypes = []interface{}{
	(MessageType)(0),            // 0: cockroach.errorspb.MessageType
	(*EncodedError)(nil),        // 1: cockroach.errorspb.EncodedError
	(*EncodedErrorLeaf)(nil),    // 2: cockroach.errorspb.EncodedErrorLeaf
	(*EncodedErrorDetails)(nil), // 3: cockroach.errorspb.EncodedErrorDetails
	(*EncodedWrapper)(nil),      // 4: cockroach.errorspb.EncodedWrapper
	(*ErrorTypeMark)(nil),       // 5: cockroach.errorspb.ErrorTypeMark
	(*StringsPayload)(nil),      // 6: cockroach.errorspb.StringsPayload
	(*ErrnoPayload)(nil),        // 7: cockroach.errorspb.ErrnoPayload
	(*anypb.Any)(nil),           // 8: google.protobuf.Any
}
var file_errorspb_errors_proto_depIdxs = []int32{
	2, // 0: cockroach.errorspb.EncodedError.leaf:type_name -> cockroach.errorspb.EncodedErrorLeaf
	4, // 1: cockroach.errorspb.EncodedError.wrapper:type_name -> cockroach.errorspb.EncodedWrapper
	3, // 2: cockroach.errorspb.EncodedErrorLeaf.details:type_name -> cockroach.errorspb.EncodedErrorDetails
	1, // 3: cockroach.errorspb.EncodedErrorLeaf.multierror_causes:type_name -> cockroach.errorspb.EncodedError
	5, // 4: cockroach.errorspb.EncodedErrorDetails.error_type_mark:type_name -> cockroach.errorspb.ErrorTypeMark
	8, // 5: cockroach.errorspb.EncodedErrorDetails.full_details:type_name -> google.protobuf.Any
	1, // 6: cockroach.errorspb.EncodedWrapper.cause:type_name -> cockroach.errorspb.EncodedError
	3, // 7: cockroach.errorspb.EncodedWrapper.details:type_name -> cockroach.errorspb.EncodedErrorDetails
	0, // 8: cockroach.errorspb.EncodedWrapper.message_type:type_name -> cockroach.errorspb.MessageType
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_errorspb_errors_proto_init() }
func file_errorspb_errors_proto_init() {
	if File_errorspb_errors_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_errorspb_errors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodedError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errorspb_errors_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodedErrorLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errorspb_errors_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodedErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errorspb_errors_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodedWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errorspb_errors_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorTypeMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errorspb_errors_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringsPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_errorspb_errors_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrnoPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_errorspb_errors_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EncodedError_Leaf)(nil),
		(*EncodedError_Wrapper)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_errorspb_errors_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_errorspb_errors_proto_goTypes,
		DependencyIndexes: file_errorspb_errors_proto_depIdxs,
		EnumInfos:         file_errorspb_errors_proto_enumTypes,
		MessageInfos:      file_errorspb_errors_proto_msgTypes,
	}.Build()
	File_errorspb_errors_proto = out.File
	file_errorspb_errors_proto_rawDesc = nil
	file_errorspb_errors_proto_goTypes = nil
	file_errorspb_errors_proto_depIdxs = nil
}
